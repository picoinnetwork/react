name: React Runtime (Test)

on:
  push:
    branches: [main]
  pull_request:
    paths-ignore:
      - 'compiler/**'

jobs:
  # Define the various test parameters and parallelism for this workflow
  build_test_params:
    name: Build test params
    runs-on: ubuntu-latest
    outputs:
      params: ${{ steps.define-params.outputs.result }}
      # How many chunks to group tests into
      parallelism: 5
    steps:
      - uses: actions/github-script@v7
        id: define-params
        with:
          script: |
            return [
              "-r=stable --env=development",
              "-r=stable --env=production",
              "-r=experimental --env=development",
              "-r=experimental --env=production",
              "-r=www-classic --env=development --variant=false",
              "-r=www-classic --env=production --variant=false",
              "-r=www-classic --env=development --variant=true",
              "-r=www-classic --env=production --variant=true",
              "-r=www-modern --env=development --variant=false",
              "-r=www-modern --env=production --variant=false",
              "-r=www-modern --env=development --variant=true",
              "-r=www-modern --env=production --variant=true",
              // Chunks may include only react-dom tests which xplat doesn't run
              "-r=xplat --env=development --variant=false --passWithNoTests",
              "-r=xplat --env=development --variant=true --passWithNoTests",
              "-r=xplat --env=production --variant=false --passWithNoTests",
              "-r=xplat --env=production --variant=true --passWithNoTests",
              // TODO: Test more persistent configurations?
              "-r=stable --env=development --persistent",
              "-r=experimental --env=development --persistent"
            ];

  # Chunk tests into groups for parallelism
  chunk_tests:
    name: Chunk tests
    runs-on: ubuntu-latest
    needs: build_test_params
    strategy:
      matrix:
        params: ${{ fromJSON(needs.build_test_params.outputs.params) }}
    continue-on-error: true
    outputs:
      chunks: ${{ steps.chunks.outputs.chunks }}
      chunk_ids: ${{ steps.chunk_ids.outputs.chunk_ids }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Restore cached node_modules
        uses: actions/cache@v4
        id: node_modules
        with:
          path: "**/node_modules"
          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - run: yarn install --frozen-lockfile
      - id: chunks
        name: Set chunks
        run: echo "chunks=$(yarn --silent test ${{ matrix.params }} --listTests --json --ci=github | jq -cM '[_nwise(length / ${{ needs.build_test_params.outputs.parallelism }} | ceil)]')" >> $GITHUB_OUTPUT
      - id: chunk_ids
        name: Set chunk IDs
        run: echo "chunk_ids=$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')" >> $GITHUB_OUTPUT
        env:
          CHUNKS: ${{ steps.chunks.outputs.chunks }}

  # Spawn a job for each set of test param and number of chunks
  test:
    name: yarn test ${{ matrix.params }} (Chunk ${{ matrix.chunk_ids }})
    runs-on: ubuntu-latest
    needs: [build_test_params, chunk_tests]
    strategy:
      matrix:
        params: ${{ fromJSON(needs.build_test_params.outputs.params) }}
        chunk_ids: ${{ fromJSON(needs.chunk_tests.outputs.chunk_ids) }}
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Restore cached node_modules
        uses: actions/cache@v4
        id: node_modules
        with:
          path: "**/node_modules"
          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - run: yarn install --frozen-lockfile
      - run: echo $CHUNKS | jq '.[${{ matrix.chunk_ids }}] | .[] | @text' | xargs yarn test ${{ matrix.params }} --ci=github
        env:
          CHUNKS: ${{ needs.chunk_tests.outputs.chunks }}
